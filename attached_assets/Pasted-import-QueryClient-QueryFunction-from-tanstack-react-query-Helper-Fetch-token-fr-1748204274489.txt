import { QueryClient, QueryFunction } from "@tanstack/react-query";

// --- Helper: Fetch token from localStorage ---
function getAuthToken(): string | null {
  try {
    const raw = localStorage.getItem("currentUser");
    return raw ? JSON.parse(raw)?.token || null : null;
  } catch (err) {
    console.warn("Failed to parse token from localStorage", err);
    return null;
  }
}

// --- Helper: Throw if response not OK ---
async function throwIfResNotOk(res: Response) {
  if (!res.ok) {
    const text = (await res.text()) || res.statusText;
    throw new Error(`${res.status}: ${text}`);
  }
}

// --- Core request function ---
export async function apiRequest(
  method: string,
  url: string,
  data?: unknown,
  isFormData = false,
  baseUrlOverride?: string
): Promise<Response> {
  const isFullUrl = url.startsWith("http");
  const baseUrl = baseUrlOverride || import.meta.env.VITE_API_GATEWAY_URL || "";
  const fullUrl = isFullUrl ? url : `${baseUrl}${url}`;

  const token = getAuthToken();

  const headers: HeadersInit = {
    Accept: "application/json",
    ...(token && { Authorization: `Bearer ${token}` })
  };

  const requestOptions: RequestInit = {
    method,
    credentials: "include",
    headers
  };

  if (data) {
    if (isFormData) {
      requestOptions.body = data as FormData;
    } else {
      headers["Content-Type"] = "application/json";
      requestOptions.body = JSON.stringify(data);
    }
  }

  console.log("API Request", { method, fullUrl, hasBody: !!data });

  try {
    const res = await fetch(fullUrl, requestOptions);
    console.log(`Response: ${res.status} ${res.statusText}`);
    await throwIfResNotOk(res);
    return res;
  } catch (err) {
    console.error("API Request Error", err);
    throw err;
  }
}

// --- Query function wrapper ---
type UnauthorizedBehavior = "returnNull" | "throw";

export const getQueryFn = <TData>(options: {
  on401?: UnauthorizedBehavior;
  defaultValue?: TData;
} = {}): QueryFunction<TData> =>
  async ({ queryKey }) => {
    const url = queryKey[0] as string;
    const unauthorizedBehavior = options.on401 ?? "throw";
    const defaultValue = options.defaultValue;

    try {
      const res = await apiRequest("GET", url);
      if (res.status === 401 && unauthorizedBehavior === "returnNull") {
        return defaultValue ?? null;
      }

      try {
        return await res.json();
      } catch (err) {
        console.warn("Failed to parse JSON", err);
        return defaultValue ?? null;
      }
    } catch (err: any) {
      if (err.message?.startsWith("401") && unauthorizedBehavior === "returnNull") {
        return defaultValue ?? null;
      }
      console.error(`QueryFn Error for ${url}`, err);
      if (defaultValue !== undefined) return defaultValue;
      throw err;
    }
  };

// --- React Query client setup ---
export const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      queryFn: getQueryFn({ on401: "throw" }),
      refetchOnWindowFocus: false,
      refetchInterval: false,
      staleTime: Infinity,
      retry: false
    },
    mutations: {
      retry: false
    }
  }
});